#!/bin/sh

# SPDX-FileCopyrightText: 2022 Brian Calhoun <brian@bemorehuman.org>
#
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# This file is part of bemorehuman. See https://bemorehuman.org

#
# This is the bemorehuman script, the main entry point into the
# bemorehuman recommendation system.
#
# If you are starting with purchases or click events, you'll want to
# generate implicit ratings by adding "-r" on the command line.
#
# If you are starting with ratings such as user ratings of movies, you
# won't need to use "-r" as you already have ratings.
#
# In all cases, you'll need to specify "-s <scale>" on the command line to
# indicate the scale. For example, "-s 10" means you have ratings in the
# range 1-10 and you'll receive recommendations in the same scale.
#
# If you want to run the test-accuracy script, specify "-t <test_people>"
# where <test_people> is the number of randomized people you want to test
# across. For example, to choose 30 random people to test, add "-t 30" to
# the command line.
#

show_help() {
    echo "Usage: ${0} [-r] -s scale [-t num_people]"
    echo ""
    echo "    -r                   # (optional) use this to generate ratings given events"
    echo "    -s <scale>           # specify rating/recommendation scale (possible values 2-32)"
    echo "    -t <test_people>     # (optional) run tests with test_people random people"
    exit 0
}

# Enable the debug just to show what is going on...
trap "set +x" QUIT EXIT
set -x

# Get parameters from command line.
while getopts "rs:t:" opt; do
    case "$opt" in
    r)
        ratings_gen=1
        ;;
    s)
        scale=${OPTARG}
        ;;
    t)
        test_people=${OPTARG}
	      ;;
    *)
        show_help
        exit 0
        ;;
    esac
done

shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# If required variables aren't set, show help and exit.
unset MISSING_PARAM
if [ -z ${scale} ]; then
    MISSING_PARAM="${MISSING_PARAM} s"
fi

if [ ${MISSING_PARAM} ] ; then
    echo "Error: Missing required parameter"
    for PARAM in ${MISSING_PARAM}; do
        echo "    -${PARAM}"
    done
    echo ""
    show_help
    exit 0
fi

# This file contains ratings or clicks or purchases, etc. that people exhibit while bemorehuman is live.
BMH_EVENTS_FILE="/opt/bemorehuman/bmh_events.txt"

# This file contains non-ratings like clicks or purchases, etc. that are input to the ratgen process.
INPUT_EVENTS_FILE="/opt/bemorehuman/events.txt"

# Now take the inputs from above and start the looping pipeline
# Begin loop over waiting/processing new events.
while true;
do
    #  Optionally generate ratings.
    if [ ${ratings_gen} ]; then
        ratgen &
        wait $!
    fi

    # Generates valences.
    valgen -r ${scale} &   # create the valences
    wait $!

    # Create both valence caches (don't have to worry about malloc_trim b/c these are separate processes)
    recgen -c &  # create the valence cache
    wait $!
    recgen -d &  # create the valence ds cache
    wait $!

    # Do we have a bemorehuman-generated events file from previous loop and a live recgen?
    PID=$(pgrep recgen)
    if [ -f ${BMH_EVENTS_FILE} ] && [ ${PID} ]; then
        # Remove the events file.
        rm ${BMH_EVENTS_FILE}

        # Send signal to long-running recgen (recgen then reloads valence cache)
        kill -s USR1 "$PID" # send SIGUSR1 to recgen which will reload caches
    else
        # Start the live recommender with output buckets of scale ${scale}.
        recgen -b ${scale} &
        sleep 2
    fi

    if [ ${test_people} ]; then
        sleep 3;                        # todo: make a "ready" tmp file here instead of a sleep?
        test-accuracy -g -r ${scale} &
        wait $!
        test-accuracy -r ${scale} -n ${test_people} &
        wait $!
    fi

    # Wait here until there's an events file we need to process.
    while [ ! -f "$BMH_EVENTS_FILE" ];
    do
        sleep 30
    done

    # NOTE: If the BMH_EVENTS_FILE contains non-ratings, then we need to cat it to events file, not ratings file.
    # Check how this script was started and if started to deal with non-ratings events then follow that.
    if [ ${ratings_gen} ]; then
        # We know it's events.txt b/c we're in implicit land.
        cat $BMH_EVENTS_FILE >> $INPUT_EVENTS_FILE
    else
        # We know it's ratings.out b/c we're in explicit land.
        cat $BMH_EVENTS_FILE >> /opt/bemorehuman/ratings.out
    fi

    # cat the latest bmh events file to bottom of "processed" file
    cat $BMH_EVENTS_FILE >> /opt/bemorehuman/bmh_events_processed.txt

# End loop over waiting/processing new events.
done
exit 0
